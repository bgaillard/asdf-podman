#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=./lib/utils.bash
source "${plugin_dir}/lib/utils.bash"

kernel="$(uname -s)"
arch="$(uname -m)"

mkdir -p "$ASDF_DOWNLOAD_PATH"

# Create archive file extension based on OS
ext="tar.gz"

if [[ "${kernel}" == "Linux" ]]; then
	ext="tar.gz"
elif [[ "${kernel}" == "Darwin" ]]; then
	ext="zip"
else
	fail "Unsupported OS: ${kernel}"
fi

release_file="$ASDF_DOWNLOAD_PATH/$TOOL_NAME-$ASDF_INSTALL_VERSION.${ext}"

# Download archive file to the download directory
download_release "$ASDF_INSTALL_VERSION" "$release_file"

#  Extract contents of archive into the download directory
if [[ "$ext" == "tar.gz" ]]; then
	tar -xzf "$release_file" -C "$ASDF_DOWNLOAD_PATH" --strip-components=1 || fail "Could not extract $release_file"
elif [[ "$ext" == "zip" ]]; then
	unzip -q "$release_file" -d "$ASDF_DOWNLOAD_PATH" || fail "Could not extract $release_file"
fi

# Remove the tar.gz file since we don't need to keep it
rm "$release_file"

# Rename the binary to the expected name
binary_path=podman-remote-static-linux_amd64

# Linux
if [[ "${kernel}" == "Linux" ]]; then
	if [[ "${arch}" == "x86_64" || "${arch}" == "amd64" ]]; then
		binary_path="podman-remote-static-linux_amd64"
	elif [[ "${arch}" == "aarch64" || "${arch}" == "arm64" ]]; then
		binary_path="podman-remote-static-linux_arm64"
	else
		fail "Unsupported architecture: ${arch}"
	fi

# MacOS
elif [[ "${kernel}" == "Darwin" ]]; then
	binary_path="podman-${ASDF_INSTALL_VERSION}/usr/bin/podman"
fi

mv "${ASDF_DOWNLOAD_PATH}/${binary_path}" "$ASDF_DOWNLOAD_PATH/podman"
